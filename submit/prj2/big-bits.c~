#include "big-bits.h"
#include "hex-util.h"

#include <stdio.h>

#include <assert.h>
#include <errno.h>
#include <limits.h>
#include <stdlib.h>
#include <string.h>

/** Provide concrete definition for struct BigBits to flesh out
 *  abstract BigBits data type.
 */
struct BigBits {
  //@TODO
  char *arr;
  int *size;
};



/** Return a pointer to a representation of a big integer with value
 *  corresponding to the non-empty hexadecimal string hex.  Note that
 *  hex will only contain hexadecimal characters '0' - '9', 'a' - 'f'
 *  and 'A' - 'F' terminated by a NUL '\0' char.
 *
 *  The string hex may not remain valid after this function returns.
 *
 *  Returns NULL on error with errno set "appropriately".
 */
const BigBits *
newBigBits(const char *hex)
{
  assert(CHAR_BIT == 8);
  //@TODO
  struct BigBits *num;
  num = (struct BigBits*) malloc(sizeof(num));
  num->arr = (char*) malloc(strlen(hex));
  num->size = (int *) malloc(sizeof(int));

  num->size[0] = 0;
  
  while(isHexChar(hex[num->size[0]])){

    num->arr[num->size[0]] = charToHexet(hex[num->size[0]]);
    num->size[0]++;
  }

  //  printf("size: %d \n", num->arr[0]);

  
  return num;
}

/** Frees all resources used by currently valid bigBits.  bigBits
 *  is not valid after this function returns.
 */
void
freeBigBits(BigBits *bigBits)
{
  //@TODO
  free(bigBits->arr);
  free(bigBits->size);
  free(bigBits);
}

char intToChar(int n){

  switch(n){

  case 1: return '1'; break;
  case 2: return '2'; break;
  case 3: return '3'; break;
  case 4: return '4'; break;
  case 5: return '5'; break;
  case 6: return '6'; break;
  case 7: return '7'; break;
  case 8: return '8'; break;
  case 9: return '9'; break;  
  case 10: return 'a'; break;
  case 11: return 'b'; break;
  case 12: return 'c'; break;
  case 13: return 'd'; break;
  case 14: return 'e'; break;
  case 15: return 'f'; break;
  }

  return '0';
}


/** Return a lower-case hex string representing bigBits. Returned
 *  string should not contain any non-significant leading zeros.
 *  Returns NULL on error with errno set "appropriately".  (Note that
 *  there is no call to free the corresponding string).
 */
const char *
stringBigBits(const BigBits *bigBits)
{ 
  //@TODO
  
  // printf("size: %d \n", bigBits->arr[0]);

  printf(" ");//This has to be here otherwise the output gets all messed up for some reason. Figure this out later
  
  char str[bigBits->size[0]];

  int counterForArr = 0;
  int counterForStr = 0;
  
  int doneWithLeadingZeroes = 0;

  while(counterForArr <  bigBits->size[0]){

    if(doneWithLeadingZeroes == 0 && intToChar(bigBits->arr[counterForArr]) == '0'){
      counterForArr++;
      continue;
    }
    else{
      doneWithLeadingZeroes = 1;
      str[counterForStr] = intToChar(bigBits->arr[counterForArr]);
      counterForStr++;
    }
    counterForArr++;
  }

  //str[counterForStr] = '\0';

  //printf("%c \n", str[0]);

  char* p = str;
  
  return p;
}

int returnLargest(int a, int b){
  if(a > b){
    return a;
  }
  return b;
}

int returnSmallest(int a, int b){
  if(a>b){
    return b;
  }
  return a;
}

/** Return a new BigBits which is the bitwise-& of bigBits1 and bigBits2.
 *  Returns NULL on error with errno set "appropriately".
 */
const BigBits *
andBigBits(const BigBits *bigBits1, const BigBits *bigBits2)
{
  int len = returnSmallest(bigBits1->size[0], bigBits2->size[0]);

  char arr[len];

  for(int i = 0; i < len; i++){
    arr[i] = 'F';
  }

  const struct BigBits *returner = newBigBits(arr);

  if(bigBits1->size[0] < bigBits2->size[0]){
    for(int i = 0; i < bigBits1->size[0]; i++){
     returner->arr[i] = bigBits1->arr[i] & bigBits2->arr[i];
    }
  }
  else{
    for(int i = 0; i < bigBits2->size[0]; i++){
     returner->arr[i] = bigBits1->arr[i] & bigBits2->arr[i];
    }
  }

  /*                                                                                                                                                                         
  printf("Value of Array: {");                                                                                                                                               
  for(int i = 0; i < 1; i++){                                                                                                                                                
    printf("%d, ", arr[i]);                                                                                                                                                  
  }                                                                                                                                                                          
  printf("}\n");                                                                                                                                                             
                                                                                                                                                                             
  //printf("%c \n", arr[0]);                                                                                                                                                 
  */
  return returner;
}

/** Return a new BigBits which is the bitwise-| of bigBits1 and bigBits2.
 *  Returns NULL on error with errno set "appropriately".
 */
const BigBits *
orBigBits(const BigBits *bigBits1, const BigBits *bigBits2)
{ 

  int len = returnLargest(bigBits1->size[0], bigBits2->size[0]);
  
  char arr[len];

  for(int i = 0; i < len; i++){
    arr[i] = 'F';
  }

  const struct BigBits *returner = newBigBits(arr);
  
  if(bigBits1->size[0] < bigBits2->size[0]){    
    for(int i = 0; i < bigBits1->size[0]; i++){
     returner->arr[len - i - 1] = bigBits1->arr[bigBits1->size[0] - i -1] | bigBits2->arr[bigBits2->size[0] - i - 1];
    }
    for(int i = bigBits1->size[0]; i < bigBits2->size[0]; i++){
      returner->arr[len - i - 1] = bigBits2->arr[bigBits2->size[0] - i - 1];
    }
  }
  else{
    for(int i = 0; i < bigBits2->size[0]; i++){      
     returner->arr[len - i - 1] = bigBits1->arr[bigBits1->size[0] - i - 1] | bigBits2->arr[bigBits->size[0] - i -1];
    }
    for(int i = bigBits2->size[0]; i < bigBits1->size[0]; i++){
      returner->arr[len - i - 1] = bigBits1->arr[bigBits1->size[0] - i - 1];
    }

          
  }

  /*
  printf("Value of Array: {");
  for(int i = 0; i < 1; i++){
    printf("%d, ", arr[i]);
  }
  printf("}\n");
  //printf("%c \n", arr[0]);
  */

  
  return returner;
}

/** Return a new BigBits which is the bitwise-^ of bigBits1 and bigBits2.
 *  Returns NULL on error with errno set "appropriately".
 */
const BigBits *
xorBigBits(const BigBits *bigBits1, const BigBits *bigBits2)
{
  int len = returnLargest(bigBits1->size[0], bigBits2->size[0]);

  char arr[len];

  for(int i = 0; i < len; i++){
    arr[i] = 'F';
  }

  const struct BigBits *returner = newBigBits(arr);

  if(bigBits1->size[0] < bigBits2->size[0]){
    for(int i = 0; i < bigBits1->size[0]; i++){
     returner->arr[i] = bigBits1->arr[i] ^ bigBits2->arr[i];
    }
  }
  else{
    for(int i = 0; i < bigBits2->size[0]; i++){
     returner->arr[i] = bigBits1->arr[i] ^ bigBits2->arr[i];
    }
  }

  /*                                                                                                                                                                         
  printf("Value of Array: {");                                                                                                                                               
  for(int i = 0; i < 1; i++){                                                                                                                                                
    printf("%d, ", arr[i]);                                                                                                                                                  
  }                                                                                                                                                                          
  printf("}\n");                                                                                                                                                             
                                                                                                                                                                             
  //printf("%c \n", arr[0]);                                                                                                                                                 
  */
  return returner;
}
